// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5883.Automatic.subsystems;

import org.usfirst.frc5883.Automatic.Robot;
import org.usfirst.frc5883.Automatic.RobotMap;
import org.usfirst.frc5883.Automatic.commands.Drive;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick.ButtonType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController speedController3 = RobotMap.driveTrainSpeedController3;
    private final SpeedController speedController0 = RobotMap.driveTrainSpeedController0;
    private final SpeedController speedController1 = RobotMap.driveTrainSpeedController1;
    private final SpeedController speedController2 = RobotMap.driveTrainSpeedController2;
    private final RobotDrive robotDrive41 = RobotMap.driveTrainRobotDrive41;
    public final Encoder encoder = new Encoder(0, 1, true, EncodingType.k4X);
    public ADXRS450_Gyro gyro = new ADXRS450_Gyro();
    
    
    private long oldTime;
    private double speed = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        encoder.setDistancePerPulse(4332);

    
    	setDefaultCommand(new Drive());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
	}

    public double getDistanceInMeters(){
    	return encoder.getDistance();
    	
    }
    
    
    public void driveStraight(double speed, double dystansMeter){
    	
    	
    	double angle = gyro.getAngle();
    	robotDrive41.arcadeDrive(speed, angle*0.05);
    }
    
    public void driveWithJoysticks(){
    	long newTime = System.currentTimeMillis();
    	long timeDiffernce = newTime - oldTime;
    	 SmartDashboard.putDouble("time diffrence", timeDiffernce);
    	 //SmartDashboard.putDouble("time new", newTime);
    	 SmartDashboard.putDouble("encoder", encoder.getDistance());
    	 
    	 double speedAddicional = 0.03;
    	 double joySpeedValue = Robot.oi.getJoystick1().getRawAxis(1);
    	 
    	 if(Math.abs(joySpeedValue) > 0.2){
    		 joySpeedValue = 0;
    	 }
    	 
    	 if (timeDiffernce > 1){
    		 
    		 if(-Robot.oi.getJoystick1().getRawAxis(1) > speed){
    			 speed = speed + speedAddicional + timeDiffernce/1000;
    			 oldTime = System.currentTimeMillis();
    		 } else if (-Robot.oi.getJoystick1().getRawAxis(1) < speed){
    			 speed = speed - speedAddicional + timeDiffernce/1000; 
    			 oldTime = System.currentTimeMillis();
    		 } else {
    			 speed = speed;
    		 }

    		
    	 } else {
    		 
    	 }
    	 
    	 if (speed > 1){
    		 speed = 1;
    	 }
    	 else if
    		 (speed < -1){
    		speed = -1;
    	 }
    	 SmartDashboard.putDouble("speed", speed);
    	robotDrive41.arcadeDrive(speed, -Robot.oi.getJoystick1().getRawAxis(2));
    	
    	if(Robot.oi.getJoystick1().getRawButton(2)){
    		resetEncoder();
    	};
    	speedometer();
    	
    	
    }
    public void stopDrive(){
    	robotDrive41.arcadeDrive(0, 0);
    }
    public void resetGyro(){
    	gyro.reset();
    }
    public void resetSpeed(){
    	speed = 0;
    }
    
    public void resetEncoder(){
    	encoder.reset();
    }
    
    public void speedometer(){
    	double speedometer = encoder.getRate();
    	SmartDashboard.putDouble("Speedometer", speedometer);
    }
}


package org.usfirst.frc5883.Automatic;

import edu.wpi.cscore.CvSink;
import edu.wpi.cscore.CvSource;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.opencv.core.Mat;
import org.opencv.imgproc.Imgproc;
import org.usfirst.frc5883.Automatic.Vision.VisionClient;
import org.usfirst.frc5883.Automatic.commands.*;
import org.usfirst.frc5883.Automatic.subsystems.*;

public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;
    VisionClient visionClient;

    public static OI oi;
    public static DriveTrain driveTrain;
    public static Servo servo;

    public void robotInit() {
//    	new Thread(() -> {
//            UsbCamera camera = CameraServer.getInstance().startAutomaticCapture();
//            camera.setResolution(320, 240);
//            
//            CvSink cvSink = CameraServer.getInstance().getVideo();
//            CvSource outputStream = CameraServer.getInstance().putVideo("Blur", 640, 480);
//            
//            Mat source = new Mat();
//            Mat output = new Mat();
//            
//            while(!Thread.interrupted()) {
//                cvSink.grabFrame(source);
//                Imgproc.cvtColor(source, output, Imgproc.COLOR_BGR2GRAY);
//                outputStream.putFrame(output);
//            }
//        }).start();
//		try {
//			visionClient = new VisionClient(9225, 5800);
//		} catch (Exception e) {
//			System.out.println("Failed to start VisionServer");
//			e.printStackTrace();
//		//	ErrorReporter.report("Couldn't start VisionServer");
//		}
		
		//visionClient.subscribe(drivetrain);
		//visionClient.subscribe(shooter);
		
    	RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        
        servo = new Servo();

        oi = new OI();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autoChooser = new SendableChooser();
        autoChooser.addDefault("Default Program",  new StraightDrive(3));
        autoChooser.addObject("Test Command", new AutonomousCommand());
        autoChooser.addObject("SpeedCommand", new SpeedCommand(5, 0.5));
        autoChooser.addObject("DriveAndBack", new DriveAndBack());
        autoChooser.addObject("TrapozoidalMP", new DriveDistance(1, 1, 0.2));
        SmartDashboard.putData("Autonomous mode chooser", autoChooser );
        Robot.driveTrain.encoder.reset();
    }
    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        autonomousCommand = (Command) autoChooser.getSelected();
        autonomousCommand.start();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        
        Robot.driveTrain.updateAuto();
        
        SmartDashboard.putNumber("Distance", Robot.driveTrain.getDistanceInMeters());
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
